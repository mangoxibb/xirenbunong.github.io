<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiren</title>
  
  <subtitle>谦谦君子，温润如玉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-24T13:15:36.807Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xiren</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQLyog图形化</title>
    <link href="http://yoursite.com/2018/06/03/2018/07/SQLyog/"/>
    <id>http://yoursite.com/2018/06/03/2018/07/SQLyog/</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2018-07-24T13:15:36.807Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong></p><p><a id="more"></a></p><h4>1.mysql的安装配置</h4><h4>2.SQLyog的安装与使用</h4><h4>3.新建数据库</h4><pre><code>右击选择&quot;创建数据库&quot;--输入数据库名，   基字符集&quot;UTF-8&quot;，数据库排序规则默认.</code></pre><h4>4.新建数据库</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="java 后端" scheme="http://yoursite.com/tags/java-%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>好看常用的一些前端页面组件</title>
    <link href="http://yoursite.com/2018/06/03/2018/06/h-modules/"/>
    <id>http://yoursite.com/2018/06/03/2018/06/h-modules/</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2018-07-25T14:22:17.985Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 在本篇文章中，我汇总了常见的一些在前端页面会用到的组件，比如登录框、搜索框、轮播图、基于flex的header和footer等。源代码都在<a href="https://github.com/xirenbunong" target="_blank" rel="noopener">我的github</a>中。</p><p><a id="more"></a></p><h4>1.好看常见的两个搜索框</h4><p><img src="/img/search1.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><p><img src="/img/search2.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>2.基于flex的header(页头)和footer(页脚)</h4><p><img src="/img/header.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a><img src="/img/footer.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>3.登录框</h4><p><img src="/img/login.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>4.基于Unslider插件的轮播图</h4><p><img src="/img/lbt.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>5.导航栏(带三角形)</h4><p><img src="/img/header-list.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>6.中部高度与宽度响适应布局</h4><p><img src="/img/sfy.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>7.根据数值显示</h4><p><img src="/img/zzt.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p><h4>8.有遮罩层的登录和注册</h4><p><img src="/img/shade.png" alt="banner"></p><p>More info: <a href="https://www.baidu.com" target="_blank" rel="noopener">预留链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 在本篇文章中，我汇总了常见的一些在前端页面会用到的组件，比如登录框、搜索框、轮播图、基于flex的header和footer等。源代码都在&lt;a href=&quot;https://github.com/xirenbunong&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的github&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>大型项目webpack模板</title>
    <link href="http://yoursite.com/2018/06/03/2018/06/webpack-package/"/>
    <id>http://yoursite.com/2018/06/03/2018/06/webpack-package/</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2018-07-11T14:35:27.128Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 在本篇文章中，我将webpack模板构建出来，方便快速搭建项目环境。源代码都在<a href="https://github.com/xirenbunong" target="_blank" rel="noopener">我的github</a>中。</p><p><a id="more"></a></p><h4>1.npm与webpack初始化</h4><p>1.npm init生成package.json文件，添加一些字段如description、author（和github远程仓库建立连接的话，git repository字段会自己有远程仓库地址）</p><p>2.npm install webpack -g安装webpack</p><p>3.npm install webpack@1.15.0 --save-dev在本地安装webpack</p><p>4.建立webpack.config.js文件粘贴进去modules相关部分（此目的是为了通过entry和output解决只有一个入口文件和一个出口文件的打包约束）</p><h4>2.webpack对脚本和样式的处理问题：</h4><p>dist是一个打包目录，可以随时删除，执行webpack即可再次生成</p><p>1.Js用什么loader加载？</p><p>2.怎么解决多个entry文件？<br>数组</p><p>3.怎么解决output需要分文件夹存放目标文件？<br>[name]</p><p>4.jquery引入方式？<br>npm install jquery --save-dev</p><p>5.如何提取出公共模块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用webpack的CommonsChunkPlugin提取公共代码    </span><br><span class="line">在webpack.config.js文件的plugins加入   </span><br><span class="line">new webpack.optimize.CommonsChunkPlugin(</span><br><span class="line">    name : &apos;commons&apos;,</span><br><span class="line">    filename : &apos;js/base.js&apos;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>6.样式使用怎样的loader？<br>css-loader和style-loader</p><p>7.如何将css打包成单独的文件？<br>npm install extract-text-webpack-plugin --save-dev<br>如果出错 加上版本号@1.0.1</p><h4>3.webpack对html模板的处理HtmlWebpackPlugin</h4><p>1.将html也打包到dist文件夹下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev html-webpack-plugin    </span><br><span class="line">var HtmlWebpackPlugin   = require(&apos;html-webpack-plugin&apos;);    </span><br><span class="line">要明白各个参数的含义    </span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template    : &apos;./src/view/index.html&apos;,</span><br><span class="line">            filename    : &apos;view/indx.html&apos;,</span><br><span class="line">            inject      : true,</span><br><span class="line">            hash        : true,</span><br><span class="line">            trunks      : [&apos;common&apos;, &apos;index&apos;]</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></p><p>2.解决每次jquery需要每次手动引入的问题<br>npm install html-loader --save-dev</p><h4>4.webpack对图片和字体的处理</h4><p>npm install url-loader --save-dev</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 在本篇文章中，我将webpack模板构建出来，方便快速搭建项目环境。源代码都在&lt;a href=&quot;https://github.com/xirenbunong&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的github&lt;/a&gt;中。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="原创" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%88%9B/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>浏览器报错状态码汇总</title>
    <link href="http://yoursite.com/2018/06/01/2018/06/browser-num/"/>
    <id>http://yoursite.com/2018/06/01/2018/06/browser-num/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-07-05T05:34:12.995Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 当用户试图通过HTTP或文件传输协议(FTP)访问一台正在运行Internet信息服务(IIS)的服务器上的内容时，IIS返回一个表示该请求的状态的数字代码。该状态代码记录在IIS日志中，同时也可能在Web浏览器或FTP客户端显示。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。</p><p><a id="more"></a></p><h4>1.网页报错代码汇总</h4><p>100 Continue：初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</p><p>101 Switching Protocols：服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</p><p>102 Processing：由于一个WebDAV请求可能包含多个涉及文件操作的子请求，可能花费很长的时间才能完成请求。这个状态码是指，服务器已经收到了请求，正在处理请  求，但是还没有任何响应。这防止客户端超时中断、以为请求丢失。</p><p>103 checkpoint：用于可恢复的请求建议，以恢复中止的PUT或POST请求。</p><p>200：OK 一切正常，对GET和POST请求的应答文档跟在后面。</p><p>201 Created：服务器已经创建了文档，Location头给出了它的URL。</p><p>202 Accepted：已经接受请求，但处理尚未完成。</p><p>203 Non-Authoritative Information：文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</p><p>204 No Content：没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</p><p>205 Reset Content：没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</p><p>206 Partial Content：客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</p><p>207 Multi-Status：随后的邮件正文是一个XML消息，可能包含许多单独的响应代码，这取决于有多少个子请求</p><p>208 Already ReportedDAV：binding的成员在之前针对这个请求的答复中已经被列举，不再被计入</p><p>226 IM Used：服务器已执行了对资源的请求，响应代表了对当前实例执行的一个或多个实例处理的结果</p><p>300 Multiple Choices：客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明</p><p>301 Moved Permanently：客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL</p><p>302 Found：类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”</p><p>出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求http://host/~user:http://host/~user（缺少了后面的斜杠），有的服务器返回301，有的则返回302严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307</p><p>303 See Other：类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）</p><p>304 Not Modified：客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文     档还可以继续使用</p><p>305 Use Proxy：客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）</p><p>306 Switch Proxy：该状态码不再被使用。最初意味着“后续请求应该使用指定的代理。</p><p>307 Temporary Redirect：和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才  能重定向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请  求；如果是307应答，则浏览器只能跟随对GET请求的重定向。（HTTP 1.1新）</p><p>308 Permanent Redirect：这个请求和以后的请求都应该使用另一个URI来重复。307和308与302和301的行为相似，但是不允许HTTP方法出现变化。所以比如说，向永久重  定向的资源提交表单会继续顺利执行。</p><p>400 Bad Request：请求出现语法错误。</p><p>401 Unauthorized：客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填写合适的     Authorization头后再次发出请求。</p><p>402 Payment Required：专门留给将来使用。初衷是，该状态码可用作某种数字现金或微支付方案的一部分，但是这种情形还没有出现，所以该状态码不常使用。如果某个开       发人员超出了每日限制的请求数量，Google Developers API就使用该状态。</p><p>403 Forbidden：资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</p><p>404 Not Found：无法找到指定位置的资源。这也是一个常用的应答。</p><p>405 Method Not Allowed：请求方法（GET、POST、HEAD、Delete、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</p><p>406 Not Acceptable：指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</p><p>407 Proxy Authentication Required：类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</p><p>408 Request Timeout：在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</p><p>409 Conflict：通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</p><p>410 Gone：所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而404表示由于未知      的原因文档不可用。（HTTP 1.1新）</p><p>411 Length Required：服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</p><p>412 Precondition Failed：请求头中指定的一些前提条件失败（HTTP 1.1新）。</p><p>413 Request Entity Too Large：目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1    新）。</p><p>414 Request URI Too Long：URI太长（HTTP 1.1新）。</p><p>415 Unsupported Media Type：请求实体的媒体类型不被服务器或资源支持。比如说，客户端上传image/svg+xml格式的图片，但是服务器需要图片使用一种不同的格式。</p><p>416 Requested Range Not Satisfiable：服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</p><p>417 Expectation Failed：服务器无法满足Expect（期望）请求头字段的要求。</p><p>418 I'm a teapot：1998年定义的这个代码是传统的IETF愚人节笑话之一，在RFC2324：超文本咖啡壶控制协议（Hyper Text Coffee PotControl Protocol）中予以定义，但是          没有打算由实际的HTTP服务器来实施。RFC指定该状态码应该由请求的茶壶返回给现煮咖啡。该HTTP状态码用于一些网站中的复活节彩蛋，包括Google.com。</p><p>419 Authentication Timeout：419 Authentication Timeout不是HTTP标准的一部分，它表示以前有效的验证已到期失效。它用作替代401 Unauthorized的状态码，目的是为了有别于被拒绝访问特定服务器资源的以其他方式验证的客户端。</p><p>421 Misdirected Request：请求被指向到无法生成响应的服务器（比如由于连接重复使用）。</p><p>422 Unprocessable Entity：请求符合规范，但是由于语法错误，无法得到后续处理。</p><p>423 Locked：访问的资源被锁定。</p><p>424 Failed Dependency：请求因上一个请求失败而失败（比如PROPPATCH）。</p><p>426 Upgrade Required：客户端应该换成不同的协议，比如TLS/1.0，该协议已在Upgrade（升级）头字段里指定。</p><p>428 Precondition Required：原始服务器需要请求有条件。旨在防止出现“‘丢失更新’问题：当客户端GET资源的状态、修改状态，又PUT回给服务器，同时第三方在服务器上      修改状态，导致冲突。”</p><p>429 Too Many Requests：用户在指定的时间里发送了太多的请求。用于与速率限制方案结合使用。</p><p>431 Request Header Fields Too Large：由于单个头字段或者全部头字段太大，服务器不愿意处理请求。</p><p>451 Unavailable For Legal Reasons：在因特网草案“用于法律限制的资源的新HTTP状态码”中予以定义。旨在因法律原因而拒绝访问资源时使用，比如审查制度或政府要求的      禁止访问。</p><p>500 Internal Server Error：服务器遇到了意料不到的情况，不能完成客户的请求。</p><p>501 Not Implemented：服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</p><p>502 Bad Gateway：服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</p><p>503 Service Unavailable：服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头。</p><p>504 Gateway Timeout：由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</p><p>505 HTTP Version Not Supported：服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</p><p>506 Variant Also Negotiates：对请求进行透明的内容协商导致循环引用。</p><p>507 Insufficient Storage：服务器无法存储完成请求所必须的内容。</p><p>508 Loop Detected：服务器在处理请求时检测到一个无限循环。</p><p>510 Not Extended：需要请求有额外的扩展内容，服务器才能处理请求。</p><p>511 Network Authentication Required：客户端需要验证以获得网络访问权。原本用于拦截用来控制网络访问的代理（比如，“强制门户网站”用来要求先同意服务条款，之后   才授予通过无线热点全面访问互联网的权限）。</p><p>非官方状态码</p><p>下列状态码并不由任何RFC指定，但被第三方服务用来提供语义错误响应或充分利用REST的错误响应：</p><p>420 Method Failure（Spring框架）：方法失效后，Spring框架使用的废弃响应。</p><p>420 Enhance Your Calm（Twitter）：当客户端的速率受到限制时，TwitterSearch and Trends API的版本1返回该状态码；版本1.1及以后版本改而使用429 Too Many Requests响应码。</p><p>450 Blocked by Windows Parental Controls（微软）：微软扩展代码。当Windows Parental Controls被开启，阻止对特定网页的访问时，显示该错误。</p><p>498 Invalid Token（Esri）：ArcGIS forServer返回的状态码。状态码498表明到期的令牌或其他的无效令牌。</p><p>499 Token Required（Esri）：ArcGIS forServer返回的状态码。状态码499表明需要令牌，但是令牌未提交。</p><p>509 Bandwidth Limit Exceeded（ApacheWeb Server/cPanel）：服务器已超过由服务器管理员指定的带宽；这常常被共享主机托管提供商用来限制客户的带宽。</p><h4>2.经常会用到的错误码（面试必备）</h4><p>200 - 服务器成功返回网页，客户端请求已成功。<br>302 - 对象临时移动。服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>304 - 属于重定向。自上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。<br>401 - 未授权。请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>404 - 未找到。服务器找不到请求的网页。<br>2xx - 成功。表示服务器成功地接受了客户端请求。<br>3xx - 重定向。表示要完成请求，需要进一步操作。客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。<br>4xx - 请求错误。这些状态代码表示请求可能出错，妨碍了服务器的处理。<br>5xx - 服务器错误。表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 当用户试图通过HTTP或文件传输协议(FTP)访问一台正在运行Internet信息服务(IIS)的服务器上的内容时，IIS返回一个表示该请求的状态的数字代码。该状态代码记录在IIS日志中，同时也可能在Web浏览器或FTP客户端显示。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>java入门(面向对象)</title>
    <link href="http://yoursite.com/2018/05/20/2018/05/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2018/05/20/2018/05/java面向对象/</id>
    <published>2018-05-19T16:00:00.000Z</published>
    <updated>2018-07-18T14:30:49.564Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> Java作为面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。据IDC统计，Java在所有软件开发类人才的需求中，对Java工程师的需求曾达到全部需求量的50%以上。TIOBE指数显示，Java编程已经超过了20%的普及门槛，这意味着每五行源代码当中就有一行采用Java编写</p><p><a id="more"></a></p><h4>6.JAVA面向对象</h4><h3>6.1类和对象</h3><p>1.理解类、对象、对象的属性(有什么)、对象的方法(能做什么)</p><p>2.类的组成：属性和方法<br>定义类的步骤：<br>定义类名：public class 类名{  }（其中class为声明类的关键字，类名首字母大写）<br>编写类的属性：属性类型  属性名称；（0或多都可）<br>编写类的方法</p><h3>6.2构造方法</h3><p>1.构造方法：是定义在java类中的一个用来初始化对象的方法，它与类同名且没有返回值。<br>2.语句格式：public 类名(){}<br>3.构造方法可分为无参和有参。<br>4.当没有指定构造方法时系统会自动添加无参的构造方法。<br>5.当有指定构造方法时，无论是有参、无参的构造方法，都不会自动添加无参的构造方法。<br>6.构造方法的重载：方法名相同，但参数不同的多个方法，调用时会自动根据不同的参数选择</p><h3>6.3静态static</h3><p>静态变量的访问可以不创建对象，<br>直接用 类名.静态变量 也可以创建对象用 “对象名.静态变量” 访问静态变量。<br>还可以通过改变 对象名.静态变量 来改变静态变量的值。<br>静态方法同理</p><h3>6.4封装</h3><p>6.4.1封装的步骤：</p><pre><code>1、修改属性的的可见性（设置为private）   2、创建set(接收值)和get(返回值)方法     3、在getter和setter方法中加入属性控制语句 </code></pre><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private float Screen;</span><br><span class="line">public float getScreen()&#123; </span><br><span class="line">    return Screen;</span><br><span class="line">    &#125;</span><br><span class="line">//无参返回，用get方法得到属性值</span><br><span class="line"></span><br><span class="line">public void setScreen(float newScreen)&#123;</span><br><span class="line">    //将形参值赋给变量</span><br><span class="line">    Screen = newScreen;</span><br><span class="line">&#125;</span><br><span class="line">//带参无返回，用ser方法给属性赋值</span><br></pre></td></tr></table></figure></p><p>6.4.2 This<br>this 关键字，代表当前对象。<br>this.属性   操作当前对象的属性<br>this.方法   操作当前对象的方法</p><p>6.4.3内部类</p><p>当内部类和外部类属性名相同时：<br>使用外部类类名.this.属性名  区别  内部属性名<br>没有冲突时，属性名即可访问外部类属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//外部类HelloWorld</span><br><span class="line">public class HelloWorld&#123;</span><br><span class="line">    </span><br><span class="line">    //外部类的私有属性name</span><br><span class="line">    private String name = &quot;imooc&quot;;</span><br><span class="line">    </span><br><span class="line">    //外部类的成员属性</span><br><span class="line">    int age = 20;</span><br><span class="line">    </span><br><span class="line">//成员内部类Inner</span><br><span class="line">public class Inner &#123;</span><br><span class="line"></span><br><span class="line">        //内部类中的方法</span><br><span class="line">public void show() &#123; </span><br><span class="line">System.out.println(&quot;外部类中的name：&quot; + HelloWorld.this.name);</span><br><span class="line">System.out.println(&quot;内部类中的name：&quot; + name);</span><br><span class="line">System.out.println(&quot;外部类中的age：&quot; + age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">//测试成员内部类</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        </span><br><span class="line">        //创建外部类的对象</span><br><span class="line">HelloWorld o = new HelloWorld (); </span><br><span class="line">        </span><br><span class="line">        //创建内部类的对象</span><br><span class="line">Inner inn = o.new Inner();             ;</span><br><span class="line">        </span><br><span class="line">        //调用内部类对象的show方法</span><br><span class="line">inn.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>6.5继承</h3><p>6.5.1继承的好处：</p><pre><code>子类拥有父类的所有属性(属性前面不能是private)和方法，实现代码复用.      </code></pre><p>6.5.2语法规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class 子类 extends 父类</span><br><span class="line">例如</span><br><span class="line">public class  Dog extends Animal&#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>6.5.3方法的重写<br>为什么要方法重写?</p><pre><code>当父类的方法体满足不了子类的需求时, 子类的方法体重写例如人类有方法say(), 中国人类说中国话, 美国人类说美国话, 所以子类say()方法重写   </code></pre><p>在子类中重写的规则</p><pre><code>1、返回值类型2、方法名3、参数类型及个数都要与父类继承的方法相同</code></pre><p>6.5.4final</p><pre><code>final关键字： 表示“最终的”，即不可修改。final可以修饰类、方法、属性和变量1、修饰类：不允许被继承2、修饰方法：不允许被重写3、修饰属性：则该属性不会进行隐式初始化（不会自动初始化），需要手动初始化或者在构造方法中初始化4、修饰变量，即变量变为常量注意区别属性和变量(有无修饰符public等)</code></pre><p>6.5.5super</p><pre><code>为什么要使用super?     子类属性和方法值不同, 但是都要使用时, super.属性 | super.方法来调用父类属性或方法</code></pre><h3>6.6多态</h3><p>6.6.1 为什么要使用多态?</p><p>6.6.2 类型转换instanceof</p><p>6.6.3 抽象类abstract</p><pre><code>在父类中声明抽象方法名, 以分号结束, 在子类中声明方法体abstract class Animal { abstract void grow(); }public void grow(){方法体};</code></pre><p>6.6.4 接口implements<br>(为了描述两个不同类的对象之间相同的特征)</p><pre><code>修饰符 interface 接口名 [extends 父接口1，父接口2......]{零个到多个常量定义...零个到多个抽象方法的定义....}接口可以多继承, 即可以有多个父亲因为接口是被继承、被使用的关系, 所以一般修饰符是public</code></pre><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">接口函数：</span><br><span class="line">public interface IPlaygame&#123;</span><br><span class="line">    //没有方法体</span><br><span class="line">    public void playGame();</span><br><span class="line">&#125;</span><br><span class="line">子类实现接口：</span><br><span class="line">public class SmartPhone extends Telphone implements()&#123;</span><br><span class="line">    public void playGame()&#123;</span><br><span class="line">        方法体;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>6.7异常与异常处理</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">//一些会抛出异常的方法</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">//处理该异常的代码块</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">//最终将要执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; Java作为面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。据IDC统计，Java在所有软件开发类人才的需求中，对Java工程师的需求曾达到全部需求量的50%以上。TIOBE指数显示，Java编程已经超过了20%的普及门槛，这意味着每五行源代码当中就有一行采用Java编写&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="java 后端" scheme="http://yoursite.com/tags/java-%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ajax全接触</title>
    <link href="http://yoursite.com/2018/05/16/2018/05/ajax/"/>
    <id>http://yoursite.com/2018/05/16/2018/05/ajax/</id>
    <published>2018-05-16T04:23:58.000Z</published>
    <updated>2018-07-15T12:13:07.099Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p><p><a id="more"></a></p><h3>1.XMLHttpRequest发送请求有两个方法：</h3><p>（1）open（method，url，async）</p><pre><code> method：发送请求方法； url：请求地址； async：请求同步/异步，默认值为true。</code></pre><p>（2）send（string）</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">request.open(&quot;GET&quot;,&quot;get.php&quot;,true);</span><br><span class="line">request.send();</span><br><span class="line"> </span><br><span class="line">request.open(&quot;POST&quot;,&quot;create.php&quot;,true);</span><br><span class="line">request.setRequestHeader(&quot;content-type&quot;,&quot;application/x-www-from-urlencoded&quot;);  //必须放在open和send中间。设置HTTP的头信息</span><br><span class="line">request.send(&quot;name=王二狗&amp;sex=男&quot;)</span><br></pre></td></tr></table></figure></p><h3>2.XML建立一个AJAX异步请求：</h3><ol><li>new一个XHR对象request</li><li>调用open()方法</li><li>send()一些数据</li><li>对过程进行监听来知道数据库是否响应，最后做一些事情</li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var request=new XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">request.open(&quot;GET&quot;,&quot;get.php&quot;,true);</span><br><span class="line"></span><br><span class="line">request.send();</span><br><span class="line"></span><br><span class="line">request.onreadystatechange=function()&#123;</span><br><span class="line"></span><br><span class="line">if(request.readyState===4&amp;&amp;request.status===200)&#123;</span><br><span class="line"></span><br><span class="line">//做一些事情.request.responseText&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>JSON格式示例</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;staff&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;洪七公&quot;,</span><br><span class="line">            &quot;age&quot; : &quot;70&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;郭靖&quot;,</span><br><span class="line">            &quot;age&quot; : &quot;35&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot; : &quot;黄蓉&quot;,</span><br><span class="line">            &quot;age&quot; : &quot;30&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var jsondata = &apos;&#123;&quot;staff&quot;:[&#123;&quot;name&quot;:&quot;洪七公&quot;,&quot;age&quot;:&quot;70&quot;&#125;,&#123;&quot;name&quot;:&quot;郭靖&quot;,&quot;age&quot;:&quot;35&quot;&#125;,&#123;&quot;name&quot;:&quot;黄蓉&quot;,&quot;age&quot;:&quot;30&quot;&#125;]&#125;&apos;;</span><br><span class="line"></span><br><span class="line">var jsonobj = JSON.parse(jsondata);</span><br><span class="line"></span><br><span class="line">alert(jsonobj.staff[0].name);</span><br><span class="line"></span><br><span class="line">效果：弹出“洪七公”</span><br></pre></td></tr></table></figure></p><h3>用Jquery实现Ajax</h3><pre><code>jQuery.ajax([settings])&lt;br&gt;1:type:类型，“post”或“get”,默认为“get”；&lt;br&gt;2：url:发送请求的地址&lt;br&gt;3：data：是一个对象，连同请求发送到服务器的数据&lt;br&gt;4：datatype：预期服务器返回的数据类型。如果不指定，jQuery将自动根据HTTP包MIME信息来智能判断，一般我们采用json格式，可以设置为json（可以不指定）5：success：是一个方法，请求成功后的回调函数，传入返回后的数据，以及包含成功代码的字符串6：error：是一个方法，请求失败时调用此函数，传入XMLHttpRequest对象</code></pre><p>示例代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">    type:&apos;GET/POST&apos;,</span><br><span class="line"></span><br><span class="line">    url:&apos;service.php?number=&apos; + $(&apos;#id&apos;).val(),</span><br><span class="line"></span><br><span class="line">    dataType:&apos;json&apos;,</span><br><span class="line"></span><br><span class="line">    // 如果是post方式还有个data,采用json模式数据</span><br><span class="line"></span><br><span class="line">    data:&#123;</span><br><span class="line"></span><br><span class="line">        name:$(&apos;#id&apos;).val(),</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    success:function()&#123;&#125;,</span><br><span class="line"></span><br><span class="line">    error:function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>java入门(基础知识)</title>
    <link href="http://yoursite.com/2018/05/07/2018/05/java%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/05/07/2018/05/java入门/</id>
    <published>2018-05-06T16:00:00.000Z</published>
    <updated>2018-07-13T12:43:05.001Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> Java作为面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。据IDC统计，Java在所有软件开发类人才的需求中，对Java工程师的需求曾达到全部需求量的50%以上。TIOBE指数显示，Java编程已经超过了20%的普及门槛，这意味着每五行源代码当中就有一行采用Java编写</p><p><a id="more"></a></p><h4>1.安装配置jdk</h4><p>一直点击下一步，安装目录可以自定义，但是要记住自己的安装目录在哪。<br>然后配置环境变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.JAVA_HOME  配置jdk的安装路径</span><br><span class="line">jdk的安装目录</span><br><span class="line">2.CLASS_PATH 配置类库文件的位置(.代表当前路径 ;代表隔开)</span><br><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br><span class="line">3.PATH 配置jdk命令文件的位置</span><br><span class="line">%JAVA_HOME%\bin;</span><br></pre></td></tr></table></figure></p><p>win+R,输入cmd，回车，界面输入java -version，显示版本即为正确。</p><h4>2.安装IDEA</h4><p>一直下一步就可以了<br>打开后<br>1.选择是否有自己的setting<br>2.登录自己的账号或者试用30天<br>3.选择界面风格<br>4.一直next就可以了</p><h4>3.记事本创建HelloWorld.java</h4><p>1.记事本创建HelloWorld.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;HelloWorld!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">代码的HelloWorld要与文件名HelloWorld相同</span><br><span class="line">public static void是固定的</span><br></pre></td></tr></table></figure></p><p>2.使用javac命令编译为字节码文件HelloWorld.class<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd中执行 javac HelloWorld.java</span><br><span class="line">出现HelloWorld.class</span><br></pre></td></tr></table></figure></p><p>3.执行HelloWorld<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在cmd中执行java HelloWorld</span><br></pre></td></tr></table></figure></p><h4>4.使用eclipse创建java项目</h4><h3>4.1.创建java项目</h3><p>new-java project-name</p><h3>4.2.创建程序包</h3><p>new-package-name<br>注意包名为域名的反向</p><h3>4.3.编写java源程序</h3><p>new-class-name<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2与3可以合并为  new-class-name/package</span><br><span class="line">name: 文件名   package: com.项目名</span><br></pre></td></tr></table></figure></p><h3>4.4.运行java源程序</h3><p>空白处右击-Run As-java application<br>或者点击导航栏的运行按钮</p><h4>5.JAVA基本语法</h4><h3>5.1.java的变量需要指定数据类型,先声明再使用</h3><p>整型int a = 1;<br>浮点型float b = 175.2f;<br>字符型char c = 'A';<br>字符串String cc = &quot;AAA&quot;;<br>布尔型boolean d = true;</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关于 float 型和 double 型的区别，以及 char 型和 String 型的不同</span><br></pre></td></tr></table></figure></p><h3>5.2.强制转换</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double a = 12.5;</span><br><span class="line">int b = (int)a;</span><br><span class="line">//b = 12</span><br></pre></td></tr></table></figure></p><h3>5.3.Java常量</h3><p>语法：final 常量名 = 值;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">应用场景：</span><br><span class="line">final double PI = 3.14;</span><br></pre></td></tr></table></figure></p><h3>5.4.运算符</h3><p>自增++与自减--处在变量前后位置的不同，结果的不同</p><h3>5.5.Java 常用的 3 种循环： while 、 do...while 、 for</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">while语法：</span><br><span class="line">while(判断条件)&#123;</span><br><span class="line">    循环操作</span><br><span class="line">&#125;</span><br><span class="line">执行过程：</span><br><span class="line">&lt; 1 &gt;、 判断 while 后面的条件是否成立( true / false )</span><br><span class="line">&lt; 2 &gt;、 当条件成立时，执行循环内的操作代码 ，然后重复执行&lt; 1 &gt;、&lt; 2 &gt;， 直到循环条件不成立为止</span><br><span class="line">特点：先判断，后执行</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">do..while语法：</span><br><span class="line">do&#123;</span><br><span class="line">    循环操作</span><br><span class="line">&#125;while(判断条件);</span><br><span class="line">执行过程：</span><br><span class="line">&lt;1&gt;、 先执行一遍循环操作，然后判断循环条件是否成立</span><br><span class="line">&lt;2&gt;、 如果条件成立，继续执行&lt; 1 &gt; 、&lt; 2 &gt;，直到循环条件不成立为止</span><br><span class="line">特点： 先执行，后判断</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for语法：</span><br><span class="line">for(循环变量初始值;循环条件;循环变量变化)&#123;</span><br><span class="line">    循环操作</span><br><span class="line">&#125;</span><br><span class="line">执行过程：</span><br><span class="line">&lt;1&gt;、 执行循环变量初始化部分，设置循环的初始状态，此部分在整个循环中只执行一次</span><br><span class="line">&lt;2&gt;、 进行循环条件的判断，如果条件为 true ，则执行循环体内代码；如果为 false ，则直接退出循环</span><br><span class="line">&lt;3&gt;、 执行循环变量变化部分，改变循环变量的值，以便进行下一次条件判断</span><br><span class="line">&lt;4&gt;、 依次重新执行&lt; 2 &gt;、&lt; 3 &gt;、&lt; 4 &gt;，直到退出循环</span><br><span class="line">特点：相比 while 和 do...while 语句结构更加简洁易读</span><br></pre></td></tr></table></figure></p><p>Java循环跳转语句之 break 与 continue</p><h3>5.6.java获取用户输入</h3><p>Scanner类位于java.util包中，使用时需要导入此包<br>步骤<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.导入java.util.Scanner : 在代码开头的地方输入import java.util.Scanner;  </span><br><span class="line">2.创建Scanner对象 : main中输入Scanner input = new Scanner(System.in);  </span><br><span class="line">System.out.println(&quot;请输入&quot;);   </span><br><span class="line">3.接受并保存用户输入的值 ：用变量a来接收值int a = input.nextInt();</span><br></pre></td></tr></table></figure></p><h3>5.7.数组</h3><p>7.1、 声明数组<br>语法：  数据类型[ ] 数组名；<br>或者   数据类型 数组名[ ]；int[] a;</p><p>7.2、 分配空间<br>语法：  数组名 = new  数据类型 [ 数组长度 ];<br>a = new int[5];<br>或者合并为<br>int[] a = new int[5];</p><p>7.3、 赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[ ] a = new int[5];需要指定长度  </span><br><span class="line">int[] a = new int[]&#123;1,2,3,5,8&#125;;不能指定长度  </span><br><span class="line">int[] a = &#123;1,2,3,5,8&#125;;最简单的数组声明加赋值方式</span><br></pre></td></tr></table></figure></p><p>7.4、 使用Arrays 类操作 Java 中的数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">排序  Arrays.sort(数组名);</span><br><span class="line">将数组转换为字符串  System.out.println(Arrays.toString(数组名))；</span><br></pre></td></tr></table></figure></p><p>7.5、 使用 foreach 操作数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for(类型 参数 : 数组名)&#123;</span><br><span class="line">    System.out.println(参数);</span><br><span class="line">&#125;</span><br><span class="line">例：</span><br><span class="line">// 定义一个整型数组，保存成绩信息</span><br><span class="line">int[] scores = &#123; 89, 72, 64, 58, 93 &#125;;</span><br><span class="line">// 使用foreach遍历输出数组中的元素</span><br><span class="line">for ( int score : scores) &#123;</span><br><span class="line">System.out.println(score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.6、 二位数组<br>两种形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type[][] a = new type[3][4];必须有数值</span><br><span class="line">type[][] a = &#123; , , &#125;;</span><br></pre></td></tr></table></figure></p><h3>5.8.方法</h3><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">定义方法</span><br><span class="line">访问修饰符 返回值类型 方法名（参数列表）&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">创建对象</span><br><span class="line">类名 对象名 = new 类名()</span><br><span class="line"></span><br><span class="line">调用方法</span><br><span class="line">对象名.方法名()</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">带参带返回值的方法</span><br><span class="line">主函数&#123;</span><br><span class="line">    创建对象同时传参;</span><br><span class="line">    操作该对象;</span><br><span class="line">&#125;</span><br><span class="line">方法函数&#123;</span><br><span class="line">    接收参数，执行具体方法;</span><br><span class="line">    返回参数给主函数的对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; Java作为面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。据IDC统计，Java在所有软件开发类人才的需求中，对Java工程师的需求曾达到全部需求量的50%以上。TIOBE指数显示，Java编程已经超过了20%的普及门槛，这意味着每五行源代码当中就有一行采用Java编写&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="java 后端" scheme="http://yoursite.com/tags/java-%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/05/06/2018/05/zhengze/"/>
    <id>http://yoursite.com/2018/05/06/2018/05/zhengze/</id>
    <published>2018-05-05T16:00:00.000Z</published>
    <updated>2018-07-05T05:07:46.445Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 在编写处理字符串的程序或网页时, 经常会有查找符合某些复杂规则的字符串的需要, 正则表达式就是用于描述这些规则的工具. 换句话说, 正则表达式就是记录文本规则的代码.</p><p><a id="more"></a></p><h4>1.思维导图</h4><p>单击图片打开可下载</p><p><img src="/img/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.jpg" alt="banner"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 在编写处理字符串的程序或网页时, 经常会有查找符合某些复杂规则的字符串的需要, 正则表达式就是用于描述这些规则的工具. 换句话说, 正则表达式就是记录文本规则的代码.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>浅谈javascript难点</title>
    <link href="http://yoursite.com/2018/05/02/2018/05/js7/"/>
    <id>http://yoursite.com/2018/05/02/2018/05/js7/</id>
    <published>2018-05-01T16:00:00.000Z</published>
    <updated>2018-05-16T13:50:34.291Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>1.函数</h4><p>为什么要创建对象?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全局变量命名太多可能会造成命名冲突, 放在一个对象下好整合</span><br></pre></td></tr></table></figure></p><p>为什么要使用函数?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以复用代码、维护性高、可读性高</span><br></pre></td></tr></table></figure></p><p>为什么要利用函数也是对象的性质给其添加属性, 并赋值为函数?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">因为这样可以将数值缓存下来</span><br><span class="line">例:</span><br><span class="line">函数名.属性 = function(参数)&#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么要将对象作为参数传入函数?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">因为函数调用传入实参时(例: 函数名(实参1,实参2,...,实参n))</span><br><span class="line">若参数个数太多, 则实参必须与形参一一对应, 容易出错, 并且有</span><br><span class="line">可选参数时, 可以不传.</span><br><span class="line">使用对象做形参, 只写一个, 例:</span><br><span class="line">function 函数名(对象X)&#123;</span><br><span class="line">    var 对象Y = &#123;&#125;;</span><br><span class="line">    对象Y.属性1 = 对象X.属性1;</span><br><span class="line">    对象Y.属性2 = 对象X.属性2;</span><br><span class="line">    对象Y.属性3 = 对象X.属性3;</span><br><span class="line">    对象Y.属性4 = 对象X.属性4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么要将对象或者函数作为函数返回值?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这样就可以返回多个值</span><br><span class="line">return &#123;</span><br><span class="line">    name : &apos;xm&apos;,</span><br><span class="line">    age  : 18</span><br><span class="line">&#125;</span><br><span class="line">return function()&#123;</span><br><span class="line">    函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4>1.闭包</h4><p>为什么要使用闭包?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为函数内定义的变量(局部变量)不能在函数体外访问, 想要将该变量在函数体外访问到, </span><br><span class="line">需要在函数内部再定义函数B, 通过B函数函数才能在函数外访问到改变量, 进行操作.</span><br></pre></td></tr></table></figure></p><p>闭包的优缺点:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">优点: 有利于封装, 可以访问局部变量.</span><br><span class="line">缺点：内存占用严重浪费, 会造成内存泄漏.</span><br></pre></td></tr></table></figure></p><h4>2.原型</h4><p>为什么要使用原型?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使方法的属性可以在方法外部去定义</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    空;</span><br><span class="line">&#125;</span><br><span class="line">代码示例:</span><br><span class="line">test.prototype.color = &quot;red&quot;;</span><br><span class="line">test.prototype.showInfo = function()&#123;</span><br><span class="line">    alert(this.color);</span><br><span class="line">&#125;</span><br><span class="line">或者(json格式):</span><br><span class="line">test.prototype = &#123;</span><br><span class="line">    color: &quot;red&quot;;</span><br><span class="line">    showInfo: function()&#123;</span><br><span class="line">        alert(this.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">备注:</span><br><span class="line">1.prototype是每个函数自带的一个属性</span><br><span class="line">2.混合模式 = 构造 + 原型</span><br></pre></td></tr></table></figure></p><h4>3.封装</h4><p>为什么要使用封装?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将局部变量、方法隐藏在接口中, 通过对外的接口来访问该属性或对象</span><br></pre></td></tr></table></figure></p><h4>4.单例模式</h4><p>为什么要使用单例模式?<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个类只有一个实例, 如</span><br><span class="line">①公司事件：员工若干, 而老板只有一个</span><br><span class="line">②皇宫事件：大臣若干, 而皇帝只有一个</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>响应式开发（二）Bootstrap</title>
    <link href="http://yoursite.com/2018/05/01/2018/05/Bootstrap/"/>
    <id>http://yoursite.com/2018/05/01/2018/05/Bootstrap/</id>
    <published>2018-04-30T16:00:00.000Z</published>
    <updated>2018-04-18T13:31:53.781Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> Bootstrap, 来自 Twitter, 是目前最受欢迎的前端框架.Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的, 它简洁灵活, 使得 Web 开发更加快捷.</p><p><a id="more"></a></p><h4>概览</h4><p><img src="/img/boot.png" alt="banner"></p><h4>1.开发环境的搭建</h4><h3>1.1 安装Git</h3><p>Bootstrap CDN 推荐</p><p>&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;&lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</p><p>&lt;!-- 可选的Bootstrap主题文件（一般不使用） --&gt;&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css&quot;&gt;&lt;/script&gt;</p><p>&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</p><p>&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</p><p>你还可以使用以下的 CDN 服务：国内推荐使用 : https://www.staticfile.org/国际推荐使用：https://cdnjs.com/</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; Bootstrap, 来自 Twitter, 是目前最受欢迎的前端框架.Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的, 它简洁灵活, 使得 Web 开发更加快捷.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="响应式开发" scheme="http://yoursite.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发入门</title>
    <link href="http://yoursite.com/2018/04/20/2018/04/wechatApp/"/>
    <id>http://yoursite.com/2018/04/20/2018/04/wechatApp/</id>
    <published>2018-04-19T16:00:00.000Z</published>
    <updated>2018-07-16T12:02:41.602Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 2017年1月9日, 微信小程序正式上线. 微信小程序无需下载, 无需安装, 即扫即用, 属于轻量型应用.小程序是一种新的开放能力, 开发者可以快速地开发一个小程序. 小程序可以在微信内被便捷地获取和传播, 同时具有出色的使用体验.</p><p><a id="more"></a></p><h4>1.概览</h4><h4>2.环境搭建</h4><h3>2.1申请APPID</h3><p>打开:<a href="https://developers.weixin.qq.com/miniprogram/dev/index.html?t=2018712" target="_blank" rel="noopener">微信开发者文档</a><br>点击 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">注册</a>, 申请APPid<br>注册成功后, 在<a href="https://mp.weixin.qq.com" target="_blank" rel="noopener">登录</a>之后, 在&quot;开发&quot;--&quot;基本配置&quot;即可获取APPid</p><h3>2.2下载开发者工具</h3><p>进入<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=2018712" target="_blank" rel="noopener">下载页面</a>下载开发者工具</p><h4>3.创建第一个小程序</h4><p>&quot;新建项目&quot;--&quot;项目目录&quot;--&quot;APPID&quot;--&quot;项目名称&quot;--&quot;点击确定&quot;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 2017年1月9日, 微信小程序正式上线. 微信小程序无需下载, 无需安装, 即扫即用, 属于轻量型应用.小程序是一种新的开放能力, 开发者可以快速地开发一个小程序. 小程序可以在微信内被便捷地获取和传播, 同时具有出色的使用体验.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>响应式开发（一）Foundation</title>
    <link href="http://yoursite.com/2018/04/16/2018/04/foundation/"/>
    <id>http://yoursite.com/2018/04/16/2018/04/foundation/</id>
    <published>2018-04-15T16:00:00.000Z</published>
    <updated>2018-04-09T07:09:06.147Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 号称是世界上最先进的响应式前端框架, Foundation是一个易用、强大而且灵活的框架, 用于构建基于任何设备上的Web应用. 提供多种Web上的UI 组件, 如表单、按钮、 标签等.</p><p><a id="more"></a></p><h4>概览</h4><h4>1.开发环境的搭建</h4><h3>1.1 安装Git</h3><p>关于git的下载地址, 安装方式, 在本人博客<a href="">git入门基础</a>中有具体讲解.</p><h3>1.2 安装Node.js</h3><p>查看node版本, 不能小于6.0.0(关于如何安装或者跟新node, 在本人博客&quot;<a href="https://xirenbunong.github.io/2018/02/28/2018/03/hexo%20pro/" target="_blank" rel="noopener">手把手教你使用Hexo打造个人博客</a>&quot;中有)<img src="/img/foundation1.png" alt="banner"></p><h3>1.3 下载Foundation</h3><p>npm install --global foundation-cli全局安装, 所以--global</p><p>foundation new会出现三个问题:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.安装web, APP, Email(选择一项即可);</span><br><span class="line">2.项目名称;</span><br><span class="line">3.直接回车即可</span><br></pre></td></tr></table></figure></p><p>安装完成后显示如下, 则表示成功, Ctrl+C退出, 否则看下文解决方法<br><img src="/img/foundation2.png" alt="banner"></p><p>如果遇到以下问题, 删除文件, 然后再npm install --save, 然后foundation new安装一次, 即可解决:<br><img src="/img/foundation3.png" alt="banner"></p><h3>1.4 启动服务预览</h3><p>cd进入到项目根目录下(非常重要！！！), 执行npm start启动服务, 然后打开文件所在目录, 在根目录下有index.html, 浏览器打开即可<br><img src="/img/foundation3.png" alt="banner"></p><h4>2.基本概念与常用工具类</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过对列添加属性来实现效果</span><br><span class="line">column: 列、 row:行.</span><br></pre></td></tr></table></figure></p><h3>2.1 了解栅格布局</h3><p>原理: 将一行分为12列进行布局, 三种尺寸：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">small: &lt; 640px</span><br><span class="line">medium: 640px &lt; &amp;&amp; &lt; 1024px</span><br><span class="line">large: &gt; 1024px</span><br></pre></td></tr></table></figure></p><h3>2.2 Flex布局</h3><p>1&gt; 不指定列宽, 则自动填充剩余位置<br>2&gt; shrink根据内容缩减列宽<br>3&gt; 可以设置对齐方式<br>4&gt; 可以控制不同尺寸下盒子排列顺序</p><h3>2.3 Visibility Classes(盒子的显示与隐藏)</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&gt;show-for-medium</span><br><span class="line">在中屏或大于中屏的屏幕上显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt;show-for-large</span><br><span class="line">在大屏或大于大屏的屏幕上显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3&gt;show-for-small-only</span><br><span class="line">仅在小屏中显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4&gt;show-for-medium-only</span><br><span class="line">仅在中屏中显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5&gt;show-for-large-only</span><br><span class="line">仅在大屏中显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6&gt;hide-for-medium</span><br><span class="line">在中屏或大于中屏的屏幕上隐藏</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7&gt;hide-for-large</span><br><span class="line">在大屏或大于大屏的屏幕上隐藏</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8&gt;hide-for-small-only</span><br><span class="line">仅在小屏中隐藏</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9&gt;hide-for-medium-only</span><br><span class="line">仅在中屏中隐藏</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10&gt;hide-for-large-only</span><br><span class="line">仅在大屏中隐藏</span><br></pre></td></tr></table></figure></p><h3>2.4 Float classes(盒子对齐)</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&gt;float-left 居左显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2&gt;float-right 居右显示</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3&gt;float-center 居中显示</span><br></pre></td></tr></table></figure></p><h3>2.5 Helper Classes</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&gt;text-left 文字居左对齐</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2&gt;text-right 文字居右对齐</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3&gt;text-center 文字居中对齐</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4&gt;text-justify 文字两端对齐</span><br></pre></td></tr></table></figure></p><h4>3.多媒体组件</h4><h3>3.1 Badeg(徽章图标)</h3><h3>3.2 Flex Video(可伸缩视频)</h3><h3>3.3 Label(标签)</h3><h3>3.4 Orbit(轮播图)</h3><h3>3.5 Progress Bar(进度条)</h3><h3>3.6 Thumbnail(缩略图)</h3><h3>3.7 Tooltip(提示框)</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 号称是世界上最先进的响应式前端框架, Foundation是一个易用、强大而且灵活的框架, 用于构建基于任何设备上的Web应用. 提供多种Web上的UI 组件, 如表单、按钮、 标签等.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="响应式开发" scheme="http://yoursite.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>响应式开发（题外篇）Flex布局</title>
    <link href="http://yoursite.com/2018/04/15/2018/04/flex/"/>
    <id>http://yoursite.com/2018/04/15/2018/04/flex/</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-07-05T09:38:44.963Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> 2009年, W3C提出了一种新的方案—-Flex布局, 可以简便、完整、响应式地实现各种页面布局. Flex 是 Flexible Box 的缩写, 意为&quot;弹性布局&quot;, 用来为盒状模型提供最大的灵活性.任何一个容器都可以指定为Flex 布局.</p><p><a id="more"></a></p><h4>概览</h4><p><img src="/img/flex.jpg" alt="banner"></p><h4>1.1一般使用格式(套路)</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display: flex;  </span><br><span class="line">flex-direction: row;  </span><br><span class="line">justify-content:center;   </span><br><span class="line">align-items:flex-end</span><br></pre></td></tr></table></figure></p><h4>1.2基本概念</h4><h4>2.1父元素属性</h4><p>flex-direction主轴的方向<br>justify-content主轴上的对齐方式<br>align-items侧轴方向上的对齐方式<br>flex-wrap决定项目在一行排不下的情况下是否换行<br>flex-flow是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap<br>align-content在侧轴方向上有额外空间时，如何每排布一行，当容器只有一行时，它不起作用</p><h4>2.2子元素属性</h4><p>order定义项目的排列顺序，数值越小排列越靠前，默认为0，可能的值为任意整数。<br>flex-grow定义项目的放大比例，默认为0，即如果存在剩余空间也不放大。<br>flex-shrink定义了项目的缩小比例，默认为1，即如果空间不足该项目将缩小。<br>flex-basis定义了在分配多余空间之前，项目占据的主轴空间（main-size）。<br>flex是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<br>align-self允许单个项目有与其他项目不一样的侧轴对齐方式，可覆盖align-items属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; 2009年, W3C提出了一种新的方案—-Flex布局, 可以简便、完整、响应式地实现各种页面布局. Flex 是 Flexible Box 的缩写, 意为&amp;quot;弹性布局&amp;quot;, 用来为盒状模型提供最大的灵活性.任何一个容器都可以指定为Flex 布局.&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="响应式开发" scheme="http://yoursite.com/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>git入门基础</title>
    <link href="http://yoursite.com/2018/04/06/2018/04/git/"/>
    <id>http://yoursite.com/2018/04/06/2018/04/git/</id>
    <published>2018-04-06T04:23:58.000Z</published>
    <updated>2018-07-22T14:02:04.790Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> Git 是一个为了更好地管理 Linux 内核开发而创立的分布式版本控制和软件配置管理软件. 国内外知名 Git 代码托管网站有： GitHub.com Coding.net code.csdn.net ...</p><p><a id="more"></a></p><h3>1.git介绍</h3><p>新知识扑面而来的时候，可能会绝望，痛苦。但是不要放弃，没有人一生下来就会这些东西的，慢慢来，想学的，总会学会。首先说一下git，github，gitbash的区别。</p><p>git主要用于开发项目，因为它采用分布式。github是一个托管平台，就是一个放你代码的网站，从个人角度来说是防止你在本地的文件丢失，从团队角度来讲是便于团队开发，因为大家都能根据项目地址查看下载文件代码。gitbash是软件git自带的命令行工具，类似cmd，可以在命令行中输入命令快速操作文件。</p><h3>2.git安装与配置</h3><p>1.先git的安装，一直默认next安装就可以了2.git的配置文件.gitconfig放在C盘User/用户名/文件夹下，使用vim .gitconfig3.将配置项敲入即可4.node的安装，一直默认next安装就可以了</p><h3>3.git与远程仓库的联系</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd是用来进入某个目录的，白色的字是自己打的（前面那个美元符号是自动生成的），然后现在就进入了我们要上传路径的目录下。  </span><br><span class="line">输入git init，这个意思是在当前项目的目录中生成本地的git管理（会发现在当前目录下多了一个.git文件夹）  </span><br><span class="line">输入git add.，这个是将项目上所有的文件添加到仓库中的意思，如果想添加某个特定的文件，只需把.换成这个特定的文件名即可。  </span><br><span class="line">rm -rf 文件名/文件夹  是删除  </span><br><span class="line">mkdir 文件名/文件夹  是创建文件夹</span><br><span class="line">vim 文件  是编辑文件</span><br></pre></td></tr></table></figure></p><p>1.mkdir test创建文件夹<br>2.cd test进入文件夹<br>3.git init初始化本地仓库，多了一个.git文件夹，通过ls -a可以查看<br>4.在test文件夹下即可加入项目文件（通过git status查看状态），使用命令git add或者git add .（.代表所有文件，点前面有空格）添加到仓库<br>5.通过git commit -m “注释”将项目提交到仓库</p><h3>4.生成ssh key</h3><p>1.通过命令ssh-keygen -t rsa -C &quot;m18791744718@163.com&quot;创建本地密钥（gitbash打开位置没有要求）<br>2.生成的密钥在C盘User/用户名/下的.ssh文件夹中<br>3.在github上添加密钥，然后创建项目，记得勾选readme<br>4.将本地仓库与github仓库相关联，使用命令 git remote add origin git@github.com:xirenbunong/test7-3.git，在origin后面的是ssh方式复制的仓库地址(把当前文件夹和git仓库的文件夹对应起来)</p><h3>5.某个项目与本地仓库之间如何联系</h3><p>1.在github上创建该项目，然后本地如果没有密钥，则在本地通过命令ssh key来配置<br>2.如果本地已经有密钥，则在github上打开项目，找到setting，添加上该项目的密钥（分清楚全局的密钥和项目的密钥）<br>3.通过git clone可以测试得到是否连接成功<br>4.git init<br>5.git add .<br>6.git commit -m &quot;说明&quot;<br>7.git remote add origin git@github.com:xirenbunong/WebHtml_Modules.git<br>8.git push origin master</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里有个坑需要注意一下，就是在上面第七步创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to git@github.com:WAng91An/TEST2.git的错。</span><br><span class="line">不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</span><br><span class="line"></span><br><span class="line">$ git pull --rebase origin master</span><br><span class="line"> 这时你再push就能成功了</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b pro_v1.0  切换分支到V1.0版本的分支 -b参数表示该分支是新建的</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; Git 是一个为了更好地管理 Linux 内核开发而创立的分布式版本控制和软件配置管理软件. 国内外知名 Git 代码托管网站有： GitHub.com Coding.net code.csdn.net ...&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门基础</title>
    <link href="http://yoursite.com/2018/04/05/2018/04/webpack/"/>
    <id>http://yoursite.com/2018/04/05/2018/04/webpack/</id>
    <published>2018-04-05T04:23:58.000Z</published>
    <updated>2018-07-05T11:55:41.870Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> webpack是一个前端资源加载打包工具。让前端工程模块化，让我们可以把复杂的程序细化为一个一个小的文件;根据模块间的依赖关系，生成对应的静态资源。</p><p><a id="more"></a></p><h3>1.核心概念</h3><p>·Entry·Output·Loaders·Plugins 打包优化和压缩</p><p>名词·Chunk·Bundle·Module模块之间的依赖关系是由require(commonjs规范)或import(es6规范)实现的。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">预留</span><br></pre></td></tr></table></figure></p><h3>2.webpack.config.js配置文件各项说明</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">预留</span><br></pre></td></tr></table></figure></p><h3>3.git与node安装</h3><h3>4.git与远程仓库的联系</h3><h3>5.生成ssh key</h3><h3>6.某个项目与本地仓库之间如何联系</h3><h3>7.安装webpack</h3><p>1.npm install webpack -g即可2.在本地环境上装一个webpack依赖，防止在部署上与本地的依赖版本不一致造成错误，使用npm install webpack@1.15.0 --save-dev</p><h3>8.package.json文件说明</h3><p>·name：项目的名字·version：项目的版本号·scripts：项目不同阶段的命令</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例 &quot;scripts&quot;:&#123;</span><br><span class="line">    &quot;test&quot;: &quot;node test.js&quot;</span><br><span class="line">    &quot;start&quot;: &quot;node cluster/master.js&quot;</span><br><span class="line">&#125;</span><br><span class="line">执行npm test = node test.js</span><br><span class="line">执行npm start = node cluster/master.js</span><br></pre></td></tr></table></figure></p><p>.dependencies：{&quot;bluebired&quot;：&quot;^3.3.4&quot;}</p><pre><code></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; webpack是一个前端资源加载打包工具。让前端工程模块化，让我们可以把复杂的程序细化为一个一个小的文件;根据模块间的依赖关系，生成对应的静态资源。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>javascript入门基础（六）BOM</title>
    <link href="http://yoursite.com/2018/04/04/2018/04/js6/"/>
    <id>http://yoursite.com/2018/04/04/2018/04/js6/</id>
    <published>2018-04-03T16:00:00.000Z</published>
    <updated>2018-04-08T15:04:20.545Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>1.window对象</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法: alert()、 confirm()、 prompt()、 open()、 close()</span><br></pre></td></tr></table></figure></p><p>1&gt;setTimeout()<br>超时调用(规定时间后发生事件)<br>setTimeout(&quot;code&quot;, millisec)或setTimeout(function(){}, millisec)<br>code: 代码串或者函数<br>millisec: 毫秒数</p><p>2&gt;clearTimeout<br>清除超时调用</p><p>3&gt;setInterval(code, millisec)<br>间歇调用(每隔指定时间执行一次代码)<br>millisec: 时间间隔的毫秒数</p><p>4&gt;clearInterval清除间歇调用</p><h4>2.Location对象</h4><p>1&gt;location.href<br>返回当前页面的URL<br>location.href(&quot;src&quot;)</p><p>2&gt;location.hash<br>返回URL中的hash</p><p>3&gt;location.host<br>返回服务器名称和</p><p>4&gt;location.hostname<br>返回不带端口号的服务器名称</p><p>5&gt;location.pathname<br>返回URL中的目录和文件名</p><p>6&gt;location.port<br>返回URL中指定的端口号</p><p>7&gt;location.protocol<br>返回页面使用的协议</p><p>8&gt;location.search<br>返回URL的查询字符串</p><p>9&gt;location.replace<br>重新定向URL</p><p>10&gt;location.reload<br>重新加载当前显示的页面</p><h4>3.History对象</h4><p>可用history.go(num)代替<br>1&gt;history.back()<br>回到历史记录的上一步</p><p>2&gt;history.forward()<br>回到历史记录的下一步</p><h4>4.Screen对象</h4><p>1&gt;screen.availWidth<br>返回可用的屏幕宽度</p><p>2&gt;screen.availHight<br>返回可用的屏幕高度<br>对比window.innerWidth与window.innerHeight</p><h4>5.Navigator对象</h4><p>1&gt;navigator.userAgent<br>返回浏览器名称、 版本等信息</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript入门基础（五）DOM事件</title>
    <link href="http://yoursite.com/2018/04/03/2018/04/js5/"/>
    <id>http://yoursite.com/2018/04/03/2018/04/js5/</id>
    <published>2018-04-02T16:00:00.000Z</published>
    <updated>2018-04-08T15:15:33.664Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>1.HTML事件</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关于this指向: 在事件触发的函数中, this是对该DOM对象的引用, 该函数需要有参数接收</span><br><span class="line">&lt;tag 事件 = &quot;执行脚本&quot;&gt;&lt;/tag&gt;或者函数名称Fn(this)</span><br></pre></td></tr></table></figure></p><h3>鼠标事件</h3><p>onload:页面加载时触发<br>onclick: 鼠标点击时触发<br>onmouseover: 鼠标滑过时触发<br>onmouseout: 鼠标离开时触发<br>onfocus: 获得焦点时触发<br>onblur: 失去焦点时触发<br>onchange: 域的内容改变时触发(一般作用于select、checkbox、radio)<br>onscroll: 拖动滚动条滚动时触发<br>onsubmit: 表单中的确认按钮被点击时发生(绑定在form表单上, 而不是按钮上)<br>onmousedown: 鼠标的按钮在元素上按下时<br>onmousemove: 在鼠标指针移动时触发<br>onresize: 调整浏览器窗口大小时触发</p><h4>2.DOM0级事件</h4><p>element.事件 = 执行脚本</p><h4>3.键盘事件</h4><p>(顺序)onkeydown: 用户按下一个键盘按键时发生<br>onkeypress: 在键盘按键被按下并释放一个键时发生<br>onkeyup: 在键盘按键被松开时发生<br>(keyCode: 返回事件触发的键值)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript入门基础（四）DOM基础</title>
    <link href="http://yoursite.com/2018/04/02/2018/04/js4/"/>
    <id>http://yoursite.com/2018/04/02/2018/04/js4/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-03-27T13:41:03.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>1.getElementById()</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过id获取.</span><br></pre></td></tr></table></figure></p><h4>2.getElementsByTagName()</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过标签名称获取(数组).</span><br></pre></td></tr></table></figure></p><h4>3.设置元素样式</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.style.styleName = &apos;styleValue&apos;;</span><br><span class="line">element:需要被设置样式的DOM对象</span><br><span class="line">styleName:样式名称, 如: color, fontSize(不能font-size), backgroundColor...</span><br><span class="line">styleValue: 样式值</span><br></pre></td></tr></table></figure></p><h4>4.innerHTML</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.innerHTML;</span><br><span class="line">返回element之间的html内容。</span><br><span class="line">element.innerHTML= &quot;html&quot;;</span><br><span class="line">设置element之间的html内容。</span><br></pre></td></tr></table></figure></p><h4>5.className</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element.className;</span><br><span class="line">获取element的class值。</span><br><span class="line">element.className = &quot;class&quot;;</span><br><span class="line">改变element的class值。</span><br></pre></td></tr></table></figure></p><h4>6.gitAttribute</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.getAttribute(&quot;attribute&quot;);</span><br><span class="line">attribute: 属性, 如: id align color </span><br><span class="line">获取自定义的属性</span><br></pre></td></tr></table></figure></p><h4>7.setAttribute</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(&quot;attribute&quot;, &quot;value&quot;);</span><br><span class="line">设置element元素的属性</span><br></pre></td></tr></table></figure></p><h4>8.removeAttribute</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.removeAttribute(&quot;attribute&quot;);</span><br><span class="line">移除元素的属性</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript入门基础（三）内置对象（Math和Date）</title>
    <link href="http://yoursite.com/2018/04/01/2018/04/js3/"/>
    <id>http://yoursite.com/2018/04/01/2018/04/js3/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2018-04-01T09:26:47.444Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>3.Math方法</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常见的Math方法：</span><br><span class="line">min()、max()、ceil()、floor()、round()、abs()、random()...</span><br></pre></td></tr></table></figure></p><h3>3.1min()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.min(num1, ...);</span><br><span class="line">返回最小值.</span><br></pre></td></tr></table></figure></p><h3>3.2max()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max(num1, ...);</span><br><span class="line">返回最大值.</span><br></pre></td></tr></table></figure></p><h3>3.3ceil()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.ceil(num);</span><br><span class="line">向上取整.</span><br></pre></td></tr></table></figure></p><h3>3.4floor()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(num);</span><br><span class="line">向下取整.</span><br></pre></td></tr></table></figure></p><h3>3.5round()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.round(num);</span><br><span class="line">四舍五入取整.</span><br></pre></td></tr></table></figure></p><h3>3.6abs()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.abs(num);</span><br><span class="line">返回绝对值.</span><br></pre></td></tr></table></figure></p><h3>3.7random()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Math.random();</span><br><span class="line">返回一个大于等于0小于1的随机数.</span><br><span class="line">n~m之间的随机数公式：</span><br><span class="line">r = Math.floor(Math.random() * (m -n +1) +n).</span><br></pre></td></tr></table></figure></p><h4>4.Date方法</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常见的Math方法：</span><br><span class="line">min()、max()、ceil()、floor()、round()、abs()、random()...</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">getFullYear(): 返回四位数年份.</span><br><span class="line">getMonth(): 返回月份，返回值0~11.</span><br><span class="line">getDate(): 返回日.</span><br><span class="line">getDay(): 返回星期，返回值0~6.</span><br><span class="line">getHours(): 返回小时.</span><br><span class="line">getMinutes(): 返回分.</span><br><span class="line">getSeconds(): 返回秒.</span><br><span class="line">getTime(): 返回 1970年 1月 1日至今的毫秒数.</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置年月日星期时分秒的Math方法为：</span><br><span class="line">将get替换为set</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回星期值的代码：</span><br><span class="line">var date = new Date();</span><br><span class="line">var weeks = [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;];</span><br><span class="line">var week = date.getDay();</span><br><span class="line">&quot;星期&quot; + weeks[week]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript入门基础（二）内置对象（String）</title>
    <link href="http://yoursite.com/2018/03/17/2018/03/js2/"/>
    <id>http://yoursite.com/2018/03/17/2018/03/js2/</id>
    <published>2018-03-16T16:00:00.000Z</published>
    <updated>2018-04-01T09:25:55.429Z</updated>
    
    <content type="html"><![CDATA[<p><strong>摘要:</strong> JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p><p><a id="more"></a></p><h4>2.字符串方法</h4><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常见的字符串方法：</span><br><span class="line">charAt()、charCodeAt()、indexOf()、lastIndexOf()、slice()、substring()、substr()、split()、replace()、touUpperCase()、toLowerCase()...</span><br></pre></td></tr></table></figure></p><h3>2.1chatAt()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.chatAt(index);</span><br><span class="line">返回字符串索引为index的字符.</span><br></pre></td></tr></table></figure></p><h3>2.2charCodeAt()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.charCodeAt(index);</span><br><span class="line">返回字符串中索引为index字符的字符编码.</span><br></pre></td></tr></table></figure></p><h3>2.3indexOf()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.indexOf(&quot;element&quot;);</span><br><span class="line">返回元素或字符串在字符串中的索引.</span><br></pre></td></tr></table></figure></p><h3>2.4lastIndexOf()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.lastIndexOf(&quot;element&quot;);</span><br><span class="line">在字符串末尾检测元素位置，但索引值还是正序.</span><br></pre></td></tr></table></figure></p><h3>2.5slice()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.slice(start, end);</span><br><span class="line">返回所选区段字符串.</span><br></pre></td></tr></table></figure></p><h3>2.6substring()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同slice();</span><br><span class="line">区别: 参数为负数时，自动转换为0.</span><br></pre></td></tr></table></figure></p><h3>2.7substr()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.substr(start, len);</span><br><span class="line">start: 字符串开始位置的索引值(必选).</span><br><span class="line">len：截取字符串长度(可选).</span><br><span class="line">返回所选区段字符串.</span><br></pre></td></tr></table></figure></p><h3>2.8split()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.split(separator);</span><br><span class="line">separator: 字符串的分隔符(&quot;2018/03/19&quot;中的&quot;/&quot;; &quot;hello-world&quot;中的&quot;-&quot;).</span><br></pre></td></tr></table></figure></p><h3>2.9replace()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.replace(substr, replace);</span><br><span class="line">substr: 需要被替换的元素；</span><br><span class="line">replace：替换元素</span><br><span class="line">将字符串中的元素替换.</span><br></pre></td></tr></table></figure></p><h3>2.10touUpperCase()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.touUpperCase();</span><br><span class="line">将字符串转换为大写.</span><br></pre></td></tr></table></figure></p><h3>2.11toLowerCase()</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.toLowerCase();</span><br><span class="line">将字符串转换为小写.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;摘要:&lt;/strong&gt; JavaScript 是世界上最流行的编程语言。这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="日记" scheme="http://yoursite.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
